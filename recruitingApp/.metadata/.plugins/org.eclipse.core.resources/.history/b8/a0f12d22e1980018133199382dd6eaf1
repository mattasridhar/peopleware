package com.peopleware.recruitingApp.services;

import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.util.ObjectUtils;

import com.peopleware.recruitingApp.dao.IApplicantsDAO;
import com.peopleware.recruitingApp.dao.IJobsDAO;
import com.peopleware.recruitingApp.models.ApplicantsModel;
import com.peopleware.recruitingApp.models.RequirementModel;

@Service
public class SelectionService implements ISelectionService {

	@Autowired
	private IApplicantsDAO applDAO;
	@Autowired
	private IJobsDAO jobsDAO;

	private List<ApplicantsModel> allAppl;

	@Override
	public List<ApplicantsModel> getSelApplsByJobId(int jobid) {

		allAppl = new ArrayList<>();
		System.out.println("SRI Service jobid: " + jobid);
		// fetching all applicants who applied for the job wid this jobid
		allAppl = applDAO.getAllApplByJobId(jobid);
		// System.out.println("SRI cond1 obj: " + allAppl.isEmpty());
		// System.out.println("SRI cond2 obj: " + ObjectUtils.isEmpty(allAppl));
		if (allAppl.isEmpty() || ObjectUtils.isEmpty(allAppl)) {
			// if no applicants have applied then return empty list.
			System.out.println("SRI service null obj: " + allAppl);
			List<ApplicantsModel> empty = new ArrayList<>();
			return empty;
		} else {
			// store all in another List to pop those who fail criteria
			List<ApplicantsModel> selectedAppl = allAppl;

			// get all requirements based on jobid
			List<RequirementModel> jobReqs = jobsDAO.getReqById(jobid);
			// System.out.println("SRI service Reqs size: "+ jobReqs.size());

			// scan thru each applicant and start validating
			Iterator<ApplicantsModel> applItr = allAppl.iterator();
			while (applItr.hasNext()) {
				int applid = applItr.next().getId();
				// int jobid = applItr.next().getJobid();
				System.out.println("SRI service applItr ID: " + applid);
				// get all requirements based on applicant id, applid and jobid
				List<RequirementModel> applReqs = jobsDAO.getReqByApplId(jobid, applid);
				// System.out.println("SRI service ApplReqs size: "+ applReqs.size());

				// iterate thru jobReqs and check if they r in applReqs? If not remove entry
				// from allAppl list.
				int totScale = compareForSkills(jobReqs, applReqs);
				System.out.println("\nSRI service compSkills totScale: " + totScale + " Appl name: " + applid);
			}
			return allAppl;
		}

	}

	public int compareForSkills(List<RequirementModel> jobReqs, List<RequirementModel> applReqs) {

		Iterator<RequirementModel> jobReqItr = jobReqs.iterator();
		Iterator<RequirementModel> applReqItr = applReqs.iterator();
		int index = 0;// need index to remove the entry from allAppl if validation fails
		int totScale = 0;//to store the overall sum of all skill scales
		while (applReqItr.hasNext()) {
			String applSkill = applReqItr.next().getSkill();
			if (applSkill != null && !applSkill.isEmpty()) { // skip if null
				System.out.println("\nSRI appl Skill: " + applSkill);
				while (jobReqItr.hasNext()) {
					String jobSkill = jobReqItr.next().getSkill();
					if (jobSkill != null && !jobSkill.isEmpty()) {// skip if null
						System.out.println("SRI job Skill: " + jobSkill);

						if (jobSkill.equals(applSkill)) {
							totScale = totScale + applReqs.get(index).getScale();
							System.out.println("SRI Scale: " + applReqs.get(index).getScale() + " totalScale: " + totScale);
						} else {
							System.out.println("SRI Chk Cond: " + (jobSkill.equals(applSkill)));
						}

					}
				}
			}
			index++;
		}
		return totScale;
	}

	/*
	 * public boolean compareForSkills(List<RequirementModel> jobReqs,
	 * List<RequirementModel> applReqs) {
	 * 
	 * Iterator<RequirementModel> jobReqItr = jobReqs.iterator();
	 * Iterator<RequirementModel> applReqItr = applReqs.iterator(); while
	 * (jobReqItr.hasNext()) { int index = 0;//need index to remove the entry from
	 * allAppl if validation fails String jobSkill = jobReqItr.next().getSkill(); if
	 * (jobSkill != null && !jobSkill.isEmpty()) { //skip if null
	 * System.out.println("\nSRI job Skill: " + jobSkill); while
	 * (applReqItr.hasNext()) { String applSkill = applReqItr.next().getSkill(); if
	 * (applSkill != null && !applSkill.isEmpty()) {//skip if null
	 * System.out.println("SRI appl Skill: " + applSkill);
	 * 
	 * if (applSkill.equals(jobSkill)) { System.out.println("SRI Scale: " +
	 * applReqs.get(index).getScale()); } else { System.out.println("SRI Chk Cond: "
	 * + (applSkill.equals(jobSkill))); }
	 * 
	 * } index++; } }
	 * 
	 * }
	 * 
	 * return true; }
	 */

}
