package com.peopleware.recruitingApp.controllers;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.util.UriComponentsBuilder;

import com.peopleware.recruitingApp.models.UserModel;
import com.peopleware.recruitingApp.services.IUserService;

@RestController
@RequestMapping("api/user")
@CrossOrigin(origins = "http://localhost:4500")
public class UserController {
	@Autowired
	private IUserService userService;

	@RequestMapping(method = RequestMethod.GET, value = "/hello")
	public String getGreeting() {
		System.out.println("SRI greeting from User Controller");
		return "SRI says Hello User";
	}

	@GetMapping("/users")
	public ResponseEntity<List<UserModel>> getAllUsers() {
		List<UserModel> list = userService.getAllUsersService();
		return new ResponseEntity<List<UserModel>>(list, HttpStatus.OK);
	}

	@RequestMapping(
		    value = "/user", 
		    method = RequestMethod.POST,
		    consumes = "application/json",
		    produces = "application/json")
	public ResponseEntity<UserModel> addUser(@RequestBody UserModel user, UriComponentsBuilder builder) {
		System.out.println("SRI user: " + user) ;// Print the name from the list....
		
		return new ResponseEntity<UserModel>(user, HttpStatus.OK);
		/*boolean flag = userService.addUser(user);
		if (flag == false) {
			return new ResponseEntity<Void>(HttpStatus.CONFLICT);
		}
		HttpHeaders headers = new HttpHeaders();
		headers.setLocation(builder.path("/user/{id}").buildAndExpand(user.getId()).toUri());
		return new ResponseEntity<Void>(headers, HttpStatus.CREATED);*/
		//return new ResponseEntity<String>("SRI Add user", HttpStatus.OK);
	}

	/*@RequestMapping(
		    value = "/user", 
		    method = RequestMethod.POST,
		    consumes = "application/json;charset=UTF-8")
	public ResponseEntity<Void> addUser(@RequestBody List<UserModel> user, UriComponentsBuilder builder) {
		//System.out.println("SRI user: " + user) ;// Print the name from the list....
		UserModel newUser = new UserModel();
        for(UserModel model : user) {
            System.out.println(model.getUsername());
            newUser.setId(model.getId());
            newUser.setActualName(model.getActualName());
            newUser.setUsername(model.getUsername());
            newUser.setPassword(model.getPassword());
            newUser.setRole(model.getRole());
        }
		boolean flag = userService.addUser(newUser);
		if (flag == false) {
			return new ResponseEntity<Void>(HttpStatus.CONFLICT);
		}
		HttpHeaders headers = new HttpHeaders();
		headers.setLocation(builder.path("/user/{id}").buildAndExpand(newUser.getId()).toUri());
		return new ResponseEntity<Void>(headers, HttpStatus.CREATED);
		//return new ResponseEntity<String>("SRI Add user", HttpStatus.OK);
	}
	*/
	
	public static class Item {
		public String username;
		public String password;
		
		public Item() {
			
		}
		
		public Item(String username, String password) {
			this.username = username;
			this.password = password;
		}
	}
}
