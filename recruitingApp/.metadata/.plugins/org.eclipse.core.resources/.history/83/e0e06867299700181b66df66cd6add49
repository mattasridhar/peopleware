package com.peopleware.recruitingApp.dao;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.jdbc.core.BeanPropertyRowMapper;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.jdbc.core.RowMapper;
import org.springframework.stereotype.Repository;
import org.springframework.transaction.annotation.Transactional;

import com.peopleware.recruitingApp.models.UserModel;
import com.peopleware.recruitingApp.models.UserRowMapper;

@Transactional
@Repository
public class UserDAO implements IUserDAO {

	@Autowired
	private JdbcTemplate jdbcTemplate;

	@Override
	public List<UserModel> getAllUsers() {
		// TODO Auto-generated method stub
		String sql = "SELECT * FROM users";//"SELECT id, product FROM products";
		// RowMapper<Article> rowMapper = new
		// BeanPropertyRowMapper<Article>(Article.class);
		RowMapper<UserModel> rowMapper = new UserRowMapper();
		return this.jdbcTemplate.query(sql, rowMapper);
	}

	@Override
	public void addUser(UserModel user) {
		// TODO Auto-generated method stub
		//Add user
		String sql = "INSERT INTO users (id, actualname, username, password, role) values (?, ?, ?, ?, ?)";
		jdbcTemplate.update(sql, user.getId(), user.getActualname(), user.getUsername(), user.getPassword(), user.getRole());
		
		//Fetch User id
		sql = "SELECT id FROM users WHERE username = ? and password=?";
		int userId = jdbcTemplate.queryForObject(sql, Integer.class, user.getUsername(), user.getPassword());
		
		//Set article id 
		user.setId(userId);
	}
	
	@Override
	public boolean userExists(String username, String password) {
		String sql = "SELECT count(*) FROM users WHERE username = ? and password=?";
		int count = jdbcTemplate.queryForObject(sql, Integer.class, username, password);
		if(count == 0) {
    		        return false;
		} else {
			return true;
		}
	}
	
	@Override
	public int getLastId() {
		String sql = "SELECT MAX(id) FROM users";
		int count = jdbcTemplate.queryForObject(sql, Integer.class);
		return count;
		
	}
	
	@Override
	public UserModel getUserById(String userId) {
		//split userID and retrieve info here
		String[] info = userId.split("*");
		System.out.println("SRI path splits: " + info[0] + ": " + info[1]);
		String username = info[0];
		String password = info[1];
		System.out.println("SRI path splits: " + username + " pwd: " + password);
		//String sql = "SELECT username, password, role FROM users WHERE username = ? and password = ?";
		//RowMapper<UserModel> rowMapper = new BeanPropertyRowMapper<UserModel>(UserModel.class);
		//UserModel user = jdbcTemplate.queryForObject(sql, rowMapper, username, password);
		//return user;
		return null;
	}

}
