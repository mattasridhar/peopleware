package com.peopleware.recruitingApp.controllers;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.util.UriComponentsBuilder;

import com.peopleware.recruitingApp.models.StatusModel;
import com.peopleware.recruitingApp.models.UserModel;
import com.peopleware.recruitingApp.services.IUserService;

@RestController
@RequestMapping("api/user")
@CrossOrigin(origins = "http://localhost:4500")
public class UserController {
	@Autowired
	private IUserService userService;

	@RequestMapping(method = RequestMethod.GET, value = "/hello")
	public StatusModel getGreeting() {
		System.out.println("SRI greeting from User Controller");

		return new StatusModel("SRI says Hello User");
	}

	@GetMapping("/users")
	public ResponseEntity<List<UserModel>> getAllUsers() {
		List<UserModel> list = userService.getAllUsersService();
		return new ResponseEntity<List<UserModel>>(list, HttpStatus.OK);
	}

	@RequestMapping(value = "/user", method = RequestMethod.POST, consumes = "application/json", produces = "application/json")
	public ResponseEntity<StatusModel> addUser(@RequestBody List<UserModel> user, UriComponentsBuilder builder) {
		boolean flag = userService.addUser(user);
		if (flag == false) {
			System.out.println("SRI false: " + HttpStatus.CONFLICT);// Print the name from the list....

			return new ResponseEntity<StatusModel>(new StatusModel("User Exists"), HttpStatus.CONFLICT);
		} else {
			return new ResponseEntity<StatusModel>(new StatusModel("User Created"), HttpStatus.CREATED);
		}
	}

	@RequestMapping(
		    value = "/adduser", 
		    method = RequestMethod.POST,
		    consumes = "application/json",
		    produces = "application/json")
	public ResponseEntity<StatusModel> addNewUser(@RequestBody UserModel newUser, UriComponentsBuilder builder) {
		//System.out.println("SRI newUser: " + newUser) ;
		
		
                boolean flag = userService.addNewUser(newUser);
                if (flag == false) {
        	    return new ResponseEntity<StatusModel>(new StatusModel("User Already Exists."), HttpStatus.CONFLICT);
                }
                HttpHeaders headers = new HttpHeaders();
                headers.setLocation(builder.path("/user/{id}").buildAndExpand(newUser.getId()).toUri());
                return new ResponseEntity<StatusModel>(new StatusModel("User Created Successfully. "), HttpStatus.CREATED);
	}

	@GetMapping("userId/{id}")
	public ResponseEntity<UserModel> getUserById(@PathVariable("id") String id) {
		System.out.println("SRI path: " + id);
		//split userID and retrieve info here
		String[] info = id.split("\\*");
		System.out.println("SRI path splits: " + info[0] + ": " + info[1]);
		UserModel user = userService.getUserById(id);
		return new ResponseEntity<UserModel>(user, HttpStatus.OK);
	}

}
